<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>electron使用flash插件</title>
    <url>/2016/10/16/electron-use-flash-extension/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote>
<p>最近有个需求是使用Electron开发一个Windows直播的客户端，使用Flash进行播放相关功能，但是Electron的Flash功能需要插件支持，折腾好久才搞定，做个记录。  </p>
</blockquote>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="安装electron"><a href="#安装electron" class="headerlink" title="安装electron"></a>安装electron</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install electron -g</span><br></pre></td></tr></table></figure>
<h4 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">$ touch package.json</span><br><span class="line">$ touch main.js</span><br></pre></td></tr></table></figure>
<blockquote>
<p>package.json  </p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>main.js  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="comment">// 注册Flash插件</span></span><br><span class="line"><span class="keyword">const</span> flashplayer = resolve(__dirname, <span class="string">'pepflashplayer.dll'</span>)</span><br><span class="line">app.commandLine.appendSwitch(<span class="string">'ppapi-flash-path'</span>, flashplayer);</span><br><span class="line">app.commandLine.appendSwitch(<span class="string">'ppapi-flash-version'</span>, <span class="string">'23.0.0.194'</span>);</span><br><span class="line"><span class="comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span></span><br><span class="line"><span class="comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建浏览器窗口。</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123; <span class="comment">// 注意一定要 添加这个 不然flash插件不会生效</span></span><br><span class="line">      plugins: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 随便加载一个flash视频页面</span></span><br><span class="line">  win.loadURL(<span class="string">'http://www.iqiyi.com/v_19rrarwio8.html?list=19rrkp73da'</span>)</span><br><span class="line">  <span class="comment">// 打开开发者工具。</span></span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line">  <span class="comment">// 当 window 被关闭，这个事件会被触发。</span></span><br><span class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span></span><br><span class="line">    <span class="comment">// 通常会把多个 window 对象存放在一个数组里面，</span></span><br><span class="line">    <span class="comment">// 与此同时，你应该删除相应的元素。</span></span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Electron 会在初始化后并准备</span></span><br><span class="line"><span class="comment">// 创建浏览器窗口时，调用这个函数。</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"><span class="comment">// 当全部窗口关闭时退出。</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></span><br><span class="line">  <span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="放置dll文件"><a href="#放置dll文件" class="headerlink" title="放置dll文件"></a>放置dll文件</h4><ul>
<li>如果你有安装Chrome浏览器，可以在地址栏输入<code>chrome://plugins/</code>，点击右侧的详细信息，找到<code>Adobe Flash Player</code>条目，在位置项复制<code>pepflashplayer.dll</code> (<strong>Windows</strong>)文件到项目目录。</li>
<li>单独安装请打开官方下载页面 <code>http://get2.adobe.com/cn/flashplayer/otherversions/</code>，选择你的操作系统，版本选择<code>for Opera and Chromium-PPAPI</code>结尾的版本。安装完毕后:<ul>
<li>在<code>C:\Windows\SysWOW64\Macromed\Flash</code>下找到32位版本如：<code>pepflashplayer32_24_0_0_194.dll</code>(名称和版本号可能有出入)。 </li>
<li><code>在C:\Windows\System32\Macromed\Flash</code>下找到64位版本，如：<code>pepflashplayer64_24_0_0_194.dll</code>(名称和版本号可能有出入)。</li>
<li>然后复制到项目目录，重命名为<code>pepflashplayer.dll</code>即可。</li>
</ul>
</li>
</ul>
<h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><blockquote>
<p>接着运行 <code>$ electron .</code> 打开一个爱奇艺视频链接，发现可以加载咯。</p>
</blockquote>
]]></content>
      <tags>
        <tag>electron</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn替换仓库源到淘宝镜像</title>
    <url>/2016/12/16/yarn-registry-set-get/</url>
    <content><![CDATA[<h3 id="什么是Yarn？"><a href="#什么是Yarn？" class="headerlink" title="什么是Yarn？"></a>什么是Yarn？</h3><blockquote>
<p>Yarn 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。就像我们可以从官方文档了解那样，它的目的是解决这些团队使用 npm 面临的少数问题，即：  </p>
</blockquote>
<ul>
<li>安装的时候无法保证速度/一致性</li>
<li>安全问题，因为 npm 安装时允许运行代码</li>
</ul>
<h3 id="修改为淘宝镜像"><a href="#修改为淘宝镜像" class="headerlink" title="修改为淘宝镜像"></a>修改为淘宝镜像</h3><h4 id="获取yarn当前配置源地址"><a href="#获取yarn当前配置源地址" class="headerlink" title="获取yarn当前配置源地址"></a>获取yarn当前配置源地址</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn config get registry</span><br><span class="line"><span class="comment"># -&gt; https://registry.yarnpkg.com</span></span><br></pre></td></tr></table></figure>
<h3 id="设置为淘宝镜像"><a href="#设置为淘宝镜像" class="headerlink" title="设置为淘宝镜像"></a>设置为淘宝镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># -&gt; yarn config v0.19.1</span></span><br><span class="line"><span class="comment"># -&gt; success Set "registry" to "https://registry.npm.taobao.org".</span></span><br><span class="line"><span class="comment"># -&gt; Done in 0.08s.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>node</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
</search>
